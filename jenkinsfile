pipeline {
  agent any
  environment {
    IMAGE_REPO = 'mungtaregistry.azurecr.io/mungta/dev'
    IMAGE_NAME = 'accusation-service'
    IMAGE_TAG = "${env.BUILD_NUMBER}"
    //IMAGE_TAG = 'latest'
    ENVIRONMENT = 'dev'
    ARGOCD_APP = 'mungta-accusation'
    APP_WAIT_TIMEOUT = '600'
  }
  stages {
    stage('Build') {
        steps {
            //slackSend (color: '#FFFF00', message: "STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
            sh './mvnw compile'
        }
    }
    stage('Package') {
        steps {
            sh './mvnw package -DskipTests'
            archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
        }
    }

//     stage('Update manifest') {
//         steps {
//           sh """
//             git config --global user.name "${GITHUB_NAME}"
//             git config --global user.email "${GITHUB_EMAIL}"
//             git config --global credential.helper cache
//             git config --global push.default simple
//           """
//
//           git url: "${HELM_CHART}", credentialsId: 'mungta_github_ssh', branch: 'main'
//           sh """
//             sed -i 's/tag:.*/tag: "${IMAGE_TAG}"/g' dev/accusation/values.yaml
//             git add dev/accusation/values.yaml
//             git commit -m 'Update Docker image tag: ${IMAGE_TAG}'
//           """
//
//           sshagent (credentials: ['mungta_github_ssh']) {
//             sh 'git push origin main'
//           }
//         }
//     }
//     stage('Argo Sync') {
//         steps {
//           withCredentials([usernamePassword(credentialsId: 'mungta_argocd', usernameVariable: 'ARGOCD_USER', passwordVariable: 'ARGOCD_AUTH_PWD')]) {
//             sh """
//             argocd login --insecure "${ArgoURL}" --username ${ARGOCD_USER} --password ${ARGOCD_AUTH_PWD}
//             argocd app sync ${ARGOCD_APP} --force
//             argocd app wait ${ARGOCD_APP} --timeout ${APP_WAIT_TIMEOUT}
//             argocd logout ${ArgoURL}
//             """
//           }
//         }
//     }
  }
//   post {
//       success {
//           slackSend (color: '#00FF00', message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
//       }
//       failure {
//           slackSend (color: '#FF0000', message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
//       }
//   }
}
